{
  "cells": [
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "NgHVlm4RZ7nT",
        "outputId": "6236c536-83aa-4cde-cd6f-3bd59a768445"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"
          ]
        }
      ],
      "source": [
        "from google.colab import drive\n",
        "drive.mount('/content/drive')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "4HglSX2JaNKr",
        "outputId": "daa70177-c789-4646-b293-fff23fe4ff6f"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: timm in /usr/local/lib/python3.12/dist-packages (1.0.20)\n",
            "Requirement already satisfied: scikit-learn in /usr/local/lib/python3.12/dist-packages (1.6.1)\n",
            "Requirement already satisfied: torchvision in /usr/local/lib/python3.12/dist-packages (0.23.0+cu126)\n",
            "Requirement already satisfied: torch in /usr/local/lib/python3.12/dist-packages (2.8.0+cu126)\n",
            "Requirement already satisfied: matplotlib in /usr/local/lib/python3.12/dist-packages (3.10.0)\n",
            "Requirement already satisfied: pandas in /usr/local/lib/python3.12/dist-packages (2.2.2)\n",
            "Requirement already satisfied: pyyaml in /usr/local/lib/python3.12/dist-packages (from timm) (6.0.3)\n",
            "Requirement already satisfied: huggingface_hub in /usr/local/lib/python3.12/dist-packages (from timm) (0.35.3)\n",
            "Requirement already satisfied: safetensors in /usr/local/lib/python3.12/dist-packages (from timm) (0.6.2)\n",
            "Requirement already satisfied: numpy>=1.19.5 in /usr/local/lib/python3.12/dist-packages (from scikit-learn) (2.0.2)\n",
            "Requirement already satisfied: scipy>=1.6.0 in /usr/local/lib/python3.12/dist-packages (from scikit-learn) (1.16.2)\n",
            "Requirement already satisfied: joblib>=1.2.0 in /usr/local/lib/python3.12/dist-packages (from scikit-learn) (1.5.2)\n",
            "Requirement already satisfied: threadpoolctl>=3.1.0 in /usr/local/lib/python3.12/dist-packages (from scikit-learn) (3.6.0)\n",
            "Requirement already satisfied: pillow!=8.3.*,>=5.3.0 in /usr/local/lib/python3.12/dist-packages (from torchvision) (11.3.0)\n",
            "Requirement already satisfied: filelock in /usr/local/lib/python3.12/dist-packages (from torch) (3.20.0)\n",
            "Requirement already satisfied: typing-extensions>=4.10.0 in /usr/local/lib/python3.12/dist-packages (from torch) (4.15.0)\n",
            "Requirement already satisfied: setuptools in /usr/local/lib/python3.12/dist-packages (from torch) (75.2.0)\n",
            "Requirement already satisfied: sympy>=1.13.3 in /usr/local/lib/python3.12/dist-packages (from torch) (1.13.3)\n",
            "Requirement already satisfied: networkx in /usr/local/lib/python3.12/dist-packages (from torch) (3.5)\n",
            "Requirement already satisfied: jinja2 in /usr/local/lib/python3.12/dist-packages (from torch) (3.1.6)\n",
            "Requirement already satisfied: fsspec in /usr/local/lib/python3.12/dist-packages (from torch) (2025.3.0)\n",
            "Requirement already satisfied: nvidia-cuda-nvrtc-cu12==12.6.77 in /usr/local/lib/python3.12/dist-packages (from torch) (12.6.77)\n",
            "Requirement already satisfied: nvidia-cuda-runtime-cu12==12.6.77 in /usr/local/lib/python3.12/dist-packages (from torch) (12.6.77)\n",
            "Requirement already satisfied: nvidia-cuda-cupti-cu12==12.6.80 in /usr/local/lib/python3.12/dist-packages (from torch) (12.6.80)\n",
            "Requirement already satisfied: nvidia-cudnn-cu12==9.10.2.21 in /usr/local/lib/python3.12/dist-packages (from torch) (9.10.2.21)\n",
            "Requirement already satisfied: nvidia-cublas-cu12==12.6.4.1 in /usr/local/lib/python3.12/dist-packages (from torch) (12.6.4.1)\n",
            "Requirement already satisfied: nvidia-cufft-cu12==11.3.0.4 in /usr/local/lib/python3.12/dist-packages (from torch) (11.3.0.4)\n",
            "Requirement already satisfied: nvidia-curand-cu12==10.3.7.77 in /usr/local/lib/python3.12/dist-packages (from torch) (10.3.7.77)\n",
            "Requirement already satisfied: nvidia-cusolver-cu12==11.7.1.2 in /usr/local/lib/python3.12/dist-packages (from torch) (11.7.1.2)\n",
            "Requirement already satisfied: nvidia-cusparse-cu12==12.5.4.2 in /usr/local/lib/python3.12/dist-packages (from torch) (12.5.4.2)\n",
            "Requirement already satisfied: nvidia-cusparselt-cu12==0.7.1 in /usr/local/lib/python3.12/dist-packages (from torch) (0.7.1)\n",
            "Requirement already satisfied: nvidia-nccl-cu12==2.27.3 in /usr/local/lib/python3.12/dist-packages (from torch) (2.27.3)\n",
            "Requirement already satisfied: nvidia-nvtx-cu12==12.6.77 in /usr/local/lib/python3.12/dist-packages (from torch) (12.6.77)\n",
            "Requirement already satisfied: nvidia-nvjitlink-cu12==12.6.85 in /usr/local/lib/python3.12/dist-packages (from torch) (12.6.85)\n",
            "Requirement already satisfied: nvidia-cufile-cu12==1.11.1.6 in /usr/local/lib/python3.12/dist-packages (from torch) (1.11.1.6)\n",
            "Requirement already satisfied: triton==3.4.0 in /usr/local/lib/python3.12/dist-packages (from torch) (3.4.0)\n",
            "Requirement already satisfied: contourpy>=1.0.1 in /usr/local/lib/python3.12/dist-packages (from matplotlib) (1.3.3)\n",
            "Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.12/dist-packages (from matplotlib) (0.12.1)\n",
            "Requirement already satisfied: fonttools>=4.22.0 in /usr/local/lib/python3.12/dist-packages (from matplotlib) (4.60.1)\n",
            "Requirement already satisfied: kiwisolver>=1.3.1 in /usr/local/lib/python3.12/dist-packages (from matplotlib) (1.4.9)\n",
            "Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.12/dist-packages (from matplotlib) (25.0)\n",
            "Requirement already satisfied: pyparsing>=2.3.1 in /usr/local/lib/python3.12/dist-packages (from matplotlib) (3.2.5)\n",
            "Requirement already satisfied: python-dateutil>=2.7 in /usr/local/lib/python3.12/dist-packages (from matplotlib) (2.9.0.post0)\n",
            "Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.12/dist-packages (from pandas) (2025.2)\n",
            "Requirement already satisfied: tzdata>=2022.7 in /usr/local/lib/python3.12/dist-packages (from pandas) (2025.2)\n",
            "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.12/dist-packages (from python-dateutil>=2.7->matplotlib) (1.17.0)\n",
            "Requirement already satisfied: mpmath<1.4,>=1.1.0 in /usr/local/lib/python3.12/dist-packages (from sympy>=1.13.3->torch) (1.3.0)\n",
            "Requirement already satisfied: requests in /usr/local/lib/python3.12/dist-packages (from huggingface_hub->timm) (2.32.4)\n",
            "Requirement already satisfied: tqdm>=4.42.1 in /usr/local/lib/python3.12/dist-packages (from huggingface_hub->timm) (4.67.1)\n",
            "Requirement already satisfied: hf-xet<2.0.0,>=1.1.3 in /usr/local/lib/python3.12/dist-packages (from huggingface_hub->timm) (1.1.10)\n",
            "Requirement already satisfied: MarkupSafe>=2.0 in /usr/local/lib/python3.12/dist-packages (from jinja2->torch) (3.0.3)\n",
            "Requirement already satisfied: charset_normalizer<4,>=2 in /usr/local/lib/python3.12/dist-packages (from requests->huggingface_hub->timm) (3.4.4)\n",
            "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.12/dist-packages (from requests->huggingface_hub->timm) (3.11)\n",
            "Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.12/dist-packages (from requests->huggingface_hub->timm) (2.5.0)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.12/dist-packages (from requests->huggingface_hub->timm) (2025.10.5)\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<torch._C.Generator at 0x79164c458ed0>"
            ]
          },
          "metadata": {},
          "execution_count": 3
        }
      ],
      "source": [
        "import math, random, warnings\n",
        "warnings.filterwarnings(\"ignore\")\n",
        "!pip install timm scikit-learn torchvision torch matplotlib pandas\n",
        "\n",
        "import numpy as np\n",
        "import torch, torch.nn as nn\n",
        "from torch.utils.data import Dataset, DataLoader, Subset\n",
        "from torchvision import datasets, transforms\n",
        "from sklearn.model_selection import StratifiedShuffleSplit\n",
        "from sklearn.metrics import classification_report, confusion_matrix, ConfusionMatrixDisplay\n",
        "from tqdm import tqdm\n",
        "import matplotlib.pyplot as plt\n",
        "import pandas as pd\n",
        "import timm\n",
        "\n",
        "# ========= Reproducibility =========\n",
        "SEED = 42\n",
        "random.seed(SEED); np.random.seed(SEED); torch.manual_seed(SEED)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "8a7UUo3Lafw6",
        "outputId": "f31701c7-bc7b-44b4-e35a-110f40449f96"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: timm in /usr/local/lib/python3.12/dist-packages (1.0.20)\n",
            "Requirement already satisfied: scikit-learn in /usr/local/lib/python3.12/dist-packages (1.6.1)\n",
            "Requirement already satisfied: torchvision in /usr/local/lib/python3.12/dist-packages (0.23.0+cu126)\n",
            "Requirement already satisfied: torch in /usr/local/lib/python3.12/dist-packages (2.8.0+cu126)\n",
            "Requirement already satisfied: matplotlib in /usr/local/lib/python3.12/dist-packages (3.10.0)\n",
            "Requirement already satisfied: pandas in /usr/local/lib/python3.12/dist-packages (2.2.2)\n",
            "Requirement already satisfied: pyyaml in /usr/local/lib/python3.12/dist-packages (from timm) (6.0.3)\n",
            "Requirement already satisfied: huggingface_hub in /usr/local/lib/python3.12/dist-packages (from timm) (0.35.3)\n",
            "Requirement already satisfied: safetensors in /usr/local/lib/python3.12/dist-packages (from timm) (0.6.2)\n",
            "Requirement already satisfied: numpy>=1.19.5 in /usr/local/lib/python3.12/dist-packages (from scikit-learn) (2.0.2)\n",
            "Requirement already satisfied: scipy>=1.6.0 in /usr/local/lib/python3.12/dist-packages (from scikit-learn) (1.16.2)\n",
            "Requirement already satisfied: joblib>=1.2.0 in /usr/local/lib/python3.12/dist-packages (from scikit-learn) (1.5.2)\n",
            "Requirement already satisfied: threadpoolctl>=3.1.0 in /usr/local/lib/python3.12/dist-packages (from scikit-learn) (3.6.0)\n",
            "Requirement already satisfied: pillow!=8.3.*,>=5.3.0 in /usr/local/lib/python3.12/dist-packages (from torchvision) (11.3.0)\n",
            "Requirement already satisfied: filelock in /usr/local/lib/python3.12/dist-packages (from torch) (3.20.0)\n",
            "Requirement already satisfied: typing-extensions>=4.10.0 in /usr/local/lib/python3.12/dist-packages (from torch) (4.15.0)\n",
            "Requirement already satisfied: setuptools in /usr/local/lib/python3.12/dist-packages (from torch) (75.2.0)\n",
            "Requirement already satisfied: sympy>=1.13.3 in /usr/local/lib/python3.12/dist-packages (from torch) (1.13.3)\n",
            "Requirement already satisfied: networkx in /usr/local/lib/python3.12/dist-packages (from torch) (3.5)\n",
            "Requirement already satisfied: jinja2 in /usr/local/lib/python3.12/dist-packages (from torch) (3.1.6)\n",
            "Requirement already satisfied: fsspec in /usr/local/lib/python3.12/dist-packages (from torch) (2025.3.0)\n",
            "Requirement already satisfied: nvidia-cuda-nvrtc-cu12==12.6.77 in /usr/local/lib/python3.12/dist-packages (from torch) (12.6.77)\n",
            "Requirement already satisfied: nvidia-cuda-runtime-cu12==12.6.77 in /usr/local/lib/python3.12/dist-packages (from torch) (12.6.77)\n",
            "Requirement already satisfied: nvidia-cuda-cupti-cu12==12.6.80 in /usr/local/lib/python3.12/dist-packages (from torch) (12.6.80)\n",
            "Requirement already satisfied: nvidia-cudnn-cu12==9.10.2.21 in /usr/local/lib/python3.12/dist-packages (from torch) (9.10.2.21)\n",
            "Requirement already satisfied: nvidia-cublas-cu12==12.6.4.1 in /usr/local/lib/python3.12/dist-packages (from torch) (12.6.4.1)\n",
            "Requirement already satisfied: nvidia-cufft-cu12==11.3.0.4 in /usr/local/lib/python3.12/dist-packages (from torch) (11.3.0.4)\n",
            "Requirement already satisfied: nvidia-curand-cu12==10.3.7.77 in /usr/local/lib/python3.12/dist-packages (from torch) (10.3.7.77)\n",
            "Requirement already satisfied: nvidia-cusolver-cu12==11.7.1.2 in /usr/local/lib/python3.12/dist-packages (from torch) (11.7.1.2)\n",
            "Requirement already satisfied: nvidia-cusparse-cu12==12.5.4.2 in /usr/local/lib/python3.12/dist-packages (from torch) (12.5.4.2)\n",
            "Requirement already satisfied: nvidia-cusparselt-cu12==0.7.1 in /usr/local/lib/python3.12/dist-packages (from torch) (0.7.1)\n",
            "Requirement already satisfied: nvidia-nccl-cu12==2.27.3 in /usr/local/lib/python3.12/dist-packages (from torch) (2.27.3)\n",
            "Requirement already satisfied: nvidia-nvtx-cu12==12.6.77 in /usr/local/lib/python3.12/dist-packages (from torch) (12.6.77)\n",
            "Requirement already satisfied: nvidia-nvjitlink-cu12==12.6.85 in /usr/local/lib/python3.12/dist-packages (from torch) (12.6.85)\n",
            "Requirement already satisfied: nvidia-cufile-cu12==1.11.1.6 in /usr/local/lib/python3.12/dist-packages (from torch) (1.11.1.6)\n",
            "Requirement already satisfied: triton==3.4.0 in /usr/local/lib/python3.12/dist-packages (from torch) (3.4.0)\n",
            "Requirement already satisfied: contourpy>=1.0.1 in /usr/local/lib/python3.12/dist-packages (from matplotlib) (1.3.3)\n",
            "Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.12/dist-packages (from matplotlib) (0.12.1)\n",
            "Requirement already satisfied: fonttools>=4.22.0 in /usr/local/lib/python3.12/dist-packages (from matplotlib) (4.60.1)\n",
            "Requirement already satisfied: kiwisolver>=1.3.1 in /usr/local/lib/python3.12/dist-packages (from matplotlib) (1.4.9)\n",
            "Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.12/dist-packages (from matplotlib) (25.0)\n",
            "Requirement already satisfied: pyparsing>=2.3.1 in /usr/local/lib/python3.12/dist-packages (from matplotlib) (3.2.5)\n",
            "Requirement already satisfied: python-dateutil>=2.7 in /usr/local/lib/python3.12/dist-packages (from matplotlib) (2.9.0.post0)\n",
            "Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.12/dist-packages (from pandas) (2025.2)\n",
            "Requirement already satisfied: tzdata>=2022.7 in /usr/local/lib/python3.12/dist-packages (from pandas) (2025.2)\n",
            "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.12/dist-packages (from python-dateutil>=2.7->matplotlib) (1.17.0)\n",
            "Requirement already satisfied: mpmath<1.4,>=1.1.0 in /usr/local/lib/python3.12/dist-packages (from sympy>=1.13.3->torch) (1.3.0)\n",
            "Requirement already satisfied: requests in /usr/local/lib/python3.12/dist-packages (from huggingface_hub->timm) (2.32.4)\n",
            "Requirement already satisfied: tqdm>=4.42.1 in /usr/local/lib/python3.12/dist-packages (from huggingface_hub->timm) (4.67.1)\n",
            "Requirement already satisfied: hf-xet<2.0.0,>=1.1.3 in /usr/local/lib/python3.12/dist-packages (from huggingface_hub->timm) (1.1.10)\n",
            "Requirement already satisfied: MarkupSafe>=2.0 in /usr/local/lib/python3.12/dist-packages (from jinja2->torch) (3.0.3)\n",
            "Requirement already satisfied: charset_normalizer<4,>=2 in /usr/local/lib/python3.12/dist-packages (from requests->huggingface_hub->timm) (3.4.4)\n",
            "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.12/dist-packages (from requests->huggingface_hub->timm) (3.11)\n",
            "Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.12/dist-packages (from requests->huggingface_hub->timm) (2.5.0)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.12/dist-packages (from requests->huggingface_hub->timm) (2025.10.5)\n"
          ]
        }
      ],
      "source": [
        "!pip install timm scikit-learn torchvision torch matplotlib pandas"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "fM8KlkCOam8G",
        "outputId": "363fe605-c6a6-4ffb-918b-c583ad59ec38"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n",
            "Extracting train data.zip → /content/data/trainval_extract ...\n",
            "Extracting test data.zip → /content/data/test_extract ...\n",
            "\n",
            "Ready for training.\n",
            "Train/Val path: /content/data/trainval_extract/train data\n",
            "Test path     : /content/data/test_extract/test data\n",
            "Classes       : ['Acne', 'Aczema', 'Bcc', 'Melanoma', 'Normal Skin', 'Psoriasis', 'Sk']\n"
          ]
        }
      ],
      "source": [
        "#For Google Colab Only\n",
        "# ============================================\n",
        "# Google Colab: unzip train/test from MyDrive\n",
        "# Produces: trainval_path, test_path, class list\n",
        "# ============================================\n",
        "from google.colab import drive\n",
        "drive.mount('/content/drive')\n",
        "\n",
        "import os, shutil, zipfile\n",
        "from pathlib import Path\n",
        "\n",
        "# ---- 1) Where your ZIPs live in Drive (CHANGE THIS IF NEEDED) ----\n",
        "drive_src_dir = Path(\"/content/drive/MyDrive/FinalDataset\")\n",
        "train_zip = drive_src_dir / \"train data.zip\"\n",
        "test_zip  = drive_src_dir / \"test data.zip\"\n",
        "\n",
        "if not train_zip.exists():\n",
        "    raise FileNotFoundError(f\"Missing ZIP in Drive: {train_zip}\")\n",
        "if not test_zip.exists():\n",
        "    raise FileNotFoundError(f\"Missing ZIP in Drive: {test_zip}\")\n",
        "\n",
        "# ---- 2) Extract to Colab local disk (fast I/O) ----\n",
        "root = Path(\"/content/data\")\n",
        "tv_extract = root / \"trainval_extract\"\n",
        "te_extract = root / \"test_extract\"\n",
        "\n",
        "for p in (tv_extract, te_extract):\n",
        "    if p.exists():\n",
        "        shutil.rmtree(p)\n",
        "    p.mkdir(parents=True, exist_ok=True)\n",
        "\n",
        "def extract_zip(zip_path: Path, target_dir: Path):\n",
        "    print(f\"Extracting {zip_path.name} → {target_dir} ...\")\n",
        "    with zipfile.ZipFile(zip_path, \"r\") as z:\n",
        "        z.extractall(target_dir)\n",
        "\n",
        "def prune_stray_dirs(root_dir: Path, names_to_remove={\".ipynb_checkpoints\", \"__MACOSX\"}):\n",
        "    for dp, dirnames, _ in os.walk(root_dir, topdown=True):\n",
        "        bad = [d for d in dirnames if d in names_to_remove or d.startswith(\".\")]\n",
        "        for b in bad:\n",
        "            full = Path(dp) / b\n",
        "            print(\"Removing stray dir:\", full)\n",
        "            shutil.rmtree(full, ignore_errors=True)\n",
        "\n",
        "def guess_class_root(extracted_dir: Path) -> Path:\n",
        "\n",
        "    subs = [p for p in extracted_dir.iterdir() if p.is_dir()]\n",
        "    if len(subs) == 1:\n",
        "        inner = subs[0]\n",
        "        if any((inner / name).is_dir() for name in os.listdir(inner)):\n",
        "            return inner\n",
        "    return extracted_dir\n",
        "\n",
        "# ---- 3) Extract & clean ----\n",
        "extract_zip(train_zip, tv_extract)\n",
        "extract_zip(test_zip,  te_extract)\n",
        "prune_stray_dirs(tv_extract)\n",
        "prune_stray_dirs(te_extract)\n",
        "\n",
        "# ---- 4) Detect class roots ----\n",
        "trainval_root = guess_class_root(tv_extract)\n",
        "test_root     = guess_class_root(te_extract)\n",
        "\n",
        "# ---- 5) Validate folder names match ----\n",
        "def list_class_folders(p: Path):\n",
        "    subs = [d for d in p.iterdir() if d.is_dir()]\n",
        "    if not subs:\n",
        "        raise RuntimeError(f\"No class subfolders found in: {p}\")\n",
        "    return sorted([d.name for d in subs])\n",
        "\n",
        "tv_classes = set(list_class_folders(trainval_root))\n",
        "te_classes = set(list_class_folders(test_root))\n",
        "if tv_classes != te_classes:\n",
        "    raise RuntimeError(\n",
        "        \"Class folders differ between train/val and test.\\n\"\n",
        "        f\"Train/Val: {sorted(tv_classes)}\\n\"\n",
        "        f\"Test     : {sorted(te_classes)}\"\n",
        "    )\n",
        "\n",
        "# ---- 6) Export final paths for training code ----\n",
        "trainval_path = str(trainval_root.resolve())\n",
        "test_path     = str(test_root.resolve())\n",
        "\n",
        "print(\"\\nReady for training.\")\n",
        "print(\"Train/Val path:\", trainval_path)\n",
        "print(\"Test path     :\", test_path)\n",
        "print(\"Classes       :\", sorted(tv_classes))\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Lyp7YfIHar6s"
      },
      "outputs": [],
      "source": [
        "trainval_path = \"/content/data/trainval_extract/train data\"\n",
        "test_path = \"/content/data/test_extract/test data\""
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "F1YKldjDbEGh",
        "outputId": "f4eeeb62-1e98-4a80-a13b-8bae9131ae60"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Using device: cuda\n"
          ]
        }
      ],
      "source": [
        "device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n",
        "print(\"Using device:\", device)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000,
          "referenced_widgets": [
            "7764c1f0f61f43218d2cb52f4755bc88",
            "a2916e34edb847829102ed768109c836",
            "3b0304c320ef40f98be2267827ba38f0",
            "9a4a81b74b324780ba4100093df14c7b",
            "19f874a9abd94134989722c39c626d6b",
            "1e2ab6163cfe4e39a6ab75a4022e43f7",
            "8e2fd21e3de14ae0a052d85c7da51a13",
            "b64203a357994a308a3627a08c34e886",
            "d3d3d73f218a4cf99bb0b4210071a019",
            "7fb43fd7debe4be483a7ba26e33f61bd",
            "4c67e6ff6aa64f7e8765bb1809ecd786"
          ]
        },
        "id": "XAqSgfROa5Jx",
        "outputId": "66a8f12f-a1c0-4298-b7c9-4a661027c084"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Classes used: ['Acne', 'Aczema', 'Bcc', 'Melanoma', 'Normal Skin', 'Psoriasis', 'Sk']\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "model.safetensors:   0%|          | 0.00/22.9M [00:00<?, ?B/s]"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "7764c1f0f61f43218d2cb52f4755bc88"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "[Stage 1] Head-only training\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": []
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Stage1 Ep 1/3 | train_acc=0.834 | val_acc=0.894\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": []
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Stage1 Ep 2/3 | train_acc=0.902 | val_acc=0.902\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": []
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Stage1 Ep 3/3 | train_acc=0.910 | val_acc=0.912\n",
            "\n",
            "[Stage 2] Unfreeze last 4 blocks + norms/pos\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": []
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Stage2 Ep 1/5 | train_acc=0.947 | val_acc=0.971\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": []
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Stage2 Ep 2/5 | train_acc=0.981 | val_acc=0.975\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": []
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Stage2 Ep 3/5 | train_acc=0.985 | val_acc=0.977\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": []
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Stage2 Ep 4/5 | train_acc=0.987 | val_acc=0.971\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": []
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Stage2 Ep 5/5 | train_acc=0.989 | val_acc=0.980\n",
            "\n",
            "[Stage 3] Unfreeze ALL\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": []
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Stage3 Ep 1/7 | train_acc=0.977 | val_acc=0.986 | best_val=0.986\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": []
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Stage3 Ep 2/7 | train_acc=0.988 | val_acc=0.990 | best_val=0.990\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": []
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Stage3 Ep 3/7 | train_acc=0.989 | val_acc=0.991 | best_val=0.991\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": []
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Stage3 Ep 4/7 | train_acc=0.993 | val_acc=0.991 | best_val=0.991\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": []
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Stage3 Ep 5/7 | train_acc=0.992 | val_acc=0.985 | best_val=0.991\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": []
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Stage3 Ep 6/7 | train_acc=0.991 | val_acc=0.991 | best_val=0.991\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": []
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Stage3 Ep 7/7 | train_acc=0.994 | val_acc=0.993 | best_val=0.993\n",
            "\n",
            " Final Test Accuracy — Vision Transformer (ViT): 97.38% \n",
            "\n",
            "Classification Report with Per-Class Accuracy (%):\n",
            "              precision  recall  f1_score  accuracy  support\n",
            "Acne              94.69   99.80     97.18     99.80      500\n",
            "Aczema            99.20   99.80     99.50     99.80      500\n",
            "Bcc               99.20   99.40     99.30     99.40      500\n",
            "Melanoma         100.00   98.40     99.19     98.40      500\n",
            "Normal Skin       99.77   92.83     96.17     92.83      474\n",
            "Psoriasis         91.83   96.60     94.15     96.60      500\n",
            "Sk                97.73   94.60     96.14     94.60      500\n",
            "accuracy          97.38   97.38     97.38     97.38     3474\n",
            "macro avg         97.49   97.35     97.38     97.38     3474\n",
            "weighted avg      97.47   97.38     97.39     97.38     3474\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "# ============================================================\n",
        "# Transforms\n",
        "# ============================================================\n",
        "IMG_SIZE = 224\n",
        "train_tfms = transforms.Compose([\n",
        "    transforms.RandomResizedCrop(IMG_SIZE, scale=(0.8, 1.0)),\n",
        "    transforms.RandomHorizontalFlip(),\n",
        "    transforms.ToTensor(),\n",
        "    transforms.Normalize((0.485,0.456,0.406),(0.229,0.224,0.225)),\n",
        "])\n",
        "eval_tfms = transforms.Compose([\n",
        "    transforms.Resize(256),\n",
        "    transforms.CenterCrop(IMG_SIZE),\n",
        "    transforms.ToTensor(),\n",
        "    transforms.Normalize((0.485,0.456,0.406),(0.229,0.224,0.225)),\n",
        "])\n",
        "\n",
        "# ============================================================\n",
        "# (Optional) Exclude classes by name or index (leave empty to keep all)\n",
        "# ============================================================\n",
        "EXCLUDE_CLASSES = []   # for example: [\"Sk\"] or [6]\n",
        "\n",
        "# Helper: normalize exclusions into lowercase names\n",
        "def normalize_excludes(excludes, all_classes):\n",
        "    name_set = set()\n",
        "    for e in (excludes or []):\n",
        "        if isinstance(e, int):\n",
        "            if 0 <= e < len(all_classes):\n",
        "                name_set.add(all_classes[e].strip().lower())\n",
        "        else:\n",
        "            name_set.add(str(e).strip().lower())\n",
        "    return name_set\n",
        "\n",
        "# ============================================================\n",
        "# Build base datasets (for labels & transforms)\n",
        "# ============================================================\n",
        "tv_raw = datasets.ImageFolder(trainval_path)\n",
        "te_raw = datasets.ImageFolder(test_path)\n",
        "\n",
        "exclude_names_lc = normalize_excludes(EXCLUDE_CLASSES, tv_raw.classes)\n",
        "\n",
        "keep_class_names = [c for c in tv_raw.classes if c.strip().lower() not in exclude_names_lc]\n",
        "if not keep_class_names:\n",
        "    raise RuntimeError(f\"All classes were excluded. Available: {tv_raw.classes}, EXCLUDE={EXCLUDE_CLASSES}\")\n",
        "\n",
        "# make sure test has all the kept classes\n",
        "missing_in_test = [c for c in keep_class_names if c not in te_raw.class_to_idx]\n",
        "if missing_in_test:\n",
        "    raise RuntimeError(f\"Missing in TEST after exclusion: {missing_in_test}\")\n",
        "\n",
        "# old idx -> new contiguous idx\n",
        "old_to_new = { tv_raw.class_to_idx[c]: i for i, c in enumerate(keep_class_names) }\n",
        "keep_old_ids = set(old_to_new.keys())\n",
        "\n",
        "# indices we keep (train/val + test)\n",
        "tv_keep_idx = [i for i, t in enumerate(tv_raw.targets) if t in keep_old_ids]\n",
        "te_keep_idx = [i for i, t in enumerate(te_raw.targets) if t in keep_old_ids]\n",
        "\n",
        "# remapped label arrays aligned to *_keep_idx\n",
        "y_tv   = np.array([old_to_new[int(tv_raw.targets[i])] for i in tv_keep_idx], dtype=np.int64)\n",
        "y_test = np.array([old_to_new[int(te_raw.targets[i])] for i in te_keep_idx], dtype=np.int64)\n",
        "\n",
        "class_names = keep_class_names\n",
        "num_classes = len(class_names)\n",
        "print(\"Classes used:\", class_names)\n",
        "\n",
        "# Proper datasets with transforms (we will subset with indices below)\n",
        "class RemappedIndexedImageFolder(Dataset):\n",
        "    def __init__(self, root, indices, transform, old_to_new):\n",
        "        self.base = datasets.ImageFolder(root, transform=transform)\n",
        "        self.indices = np.asarray(indices, dtype=np.int64)\n",
        "        self.old_to_new = old_to_new\n",
        "    def __len__(self):\n",
        "        return len(self.indices)\n",
        "    def __getitem__(self, i):\n",
        "        x, old_y = self.base[self.indices[i]]\n",
        "        return x, int(self.old_to_new[int(old_y)])\n",
        "\n",
        "tv_train_view = RemappedIndexedImageFolder(trainval_path, tv_keep_idx, train_tfms, old_to_new)\n",
        "tv_eval_view  = RemappedIndexedImageFolder(trainval_path, tv_keep_idx, eval_tfms,  old_to_new)\n",
        "te_all        = RemappedIndexedImageFolder(test_path,     te_keep_idx, eval_tfms,  old_to_new)\n",
        "\n",
        "n_tv_avail = len(y_tv)\n",
        "n_test_avail = len(y_test)\n",
        "\n",
        "# --- 1) Use ALL test images (no downsampling) ---\n",
        "test_idx_in_y = np.arange(n_test_avail, dtype=np.int64)\n",
        "\n",
        "# --- 2) Choose VAL size (~10% of trainval) ---\n",
        "VAL_TARGET = max(len(class_names), int(round(0.10 * n_tv_avail)))\n",
        "VAL_TARGET = min(VAL_TARGET, n_tv_avail - len(class_names))\n",
        "TRAIN_TARGET = n_tv_avail - VAL_TARGET\n",
        "\n",
        "def try_stratified_pick_indices(labels, pick_count, seed=SEED):\n",
        "    labels = np.asarray(labels, dtype=np.int64)\n",
        "    n = len(labels)\n",
        "    if pick_count > n:\n",
        "        raise ValueError(f\"pick_count {pick_count} > n {n}\")\n",
        "    if pick_count == n:\n",
        "        return np.arange(n, dtype=np.int64)\n",
        "    counts = np.bincount(labels, minlength=len(class_names))\n",
        "    if np.any(counts < 2):\n",
        "        return None\n",
        "    sss = StratifiedShuffleSplit(n_splits=1, test_size=pick_count, random_state=seed)\n",
        "    try:\n",
        "        _, picked = next(sss.split(np.zeros(n), labels))\n",
        "        return picked\n",
        "    except Exception:\n",
        "        return None\n",
        "\n",
        "def random_pick_indices(n, pick_count, seed=SEED):\n",
        "    rng = np.random.default_rng(seed)\n",
        "    idx = np.arange(n, dtype=np.int64)\n",
        "    rng.shuffle(idx)\n",
        "    return idx[:pick_count]\n",
        "\n",
        "# --- 3) Pick VAL indices (within y_tv), rest become TRAIN ---\n",
        "val_idx_in_y = try_stratified_pick_indices(y_tv, VAL_TARGET, seed=SEED)\n",
        "if val_idx_in_y is None:\n",
        "    val_idx_in_y = random_pick_indices(n_tv_avail, VAL_TARGET, seed=SEED)\n",
        "\n",
        "all_tv_idx_in_y = np.arange(n_tv_avail, dtype=np.int64)\n",
        "train_idx_in_y = np.setdiff1d(all_tv_idx_in_y, val_idx_in_y, assume_unique=False)\n",
        "\n",
        "# --- 4) Map from y_* arrays to actual dataset indices ---\n",
        "train_idx = np.asarray(tv_keep_idx, dtype=np.int64)[train_idx_in_y]\n",
        "val_idx   = np.asarray(tv_keep_idx, dtype=np.int64)[val_idx_in_y]\n",
        "test_idx  = np.asarray(te_keep_idx, dtype=np.int64)[test_idx_in_y]\n",
        "\n",
        "# ============================================================\n",
        "# Final datasets & loaders\n",
        "# ============================================================\n",
        "train_ds = Subset(tv_train_view, train_idx)\n",
        "val_ds   = Subset(tv_eval_view,  val_idx)\n",
        "test_ds  = Subset(te_all,        test_idx)\n",
        "\n",
        "# Device\n",
        "device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n",
        "\n",
        "BATCH = 32\n",
        "NUM_WORKERS = 2\n",
        "PIN = True if device.type == \"cuda\" else False\n",
        "\n",
        "train_loader = DataLoader(train_ds, batch_size=BATCH, shuffle=True,\n",
        "                          num_workers=NUM_WORKERS, pin_memory=PIN)\n",
        "val_loader   = DataLoader(val_ds,   batch_size=BATCH, shuffle=False,\n",
        "                          num_workers=NUM_WORKERS, pin_memory=PIN)\n",
        "test_loader  = DataLoader(test_ds,  batch_size=BATCH, shuffle=False,\n",
        "                          num_workers=NUM_WORKERS, pin_memory=PIN)\n",
        "\n",
        "total = len(train_ds) + len(val_ds) + len(test_ds)\n",
        "\n",
        "# ============================================================\n",
        "# Model + Staged Fine-Tuning\n",
        "#   Stage 1: head-only (few epochs, higher LR)\n",
        "#   Stage 2: unfreeze last 4 blocks + norms/pos_embed (mid LR)\n",
        "#   Stage 3: unfreeze all (low LR)\n",
        "# ============================================================\n",
        "MODEL_NAME = \"vit_tiny_patch16_224\"   # try \"vit_base_patch16_224\" or \"vit_small_patch16_224\" for higher accuracy (slower)\n",
        "\n",
        "model = timm.create_model(MODEL_NAME, pretrained=True, num_classes=num_classes).to(device)\n",
        "\n",
        "# Utils to (un)freeze and to grab head\n",
        "def get_head(m):\n",
        "    return getattr(m, \"head\", None) or getattr(m, \"classifier\", None)\n",
        "\n",
        "def set_trainable(module, trainable: bool):\n",
        "    for p in module.parameters():\n",
        "        p.requires_grad = trainable\n",
        "\n",
        "# AMP (faster on GPU)\n",
        "scaler = torch.cuda.amp.GradScaler(enabled=(device.type==\"cuda\"))\n",
        "\n",
        "# Loss with label smoothing + (optional) class weights from TRAIN subset\n",
        "train_labels = np.array([y_tv[i] for i in train_idx])\n",
        "counts = np.bincount(train_labels, minlength=num_classes).astype(float)\n",
        "inv = 1.0 / np.clip(counts, 1, None)\n",
        "inv = inv / inv.sum() * num_classes\n",
        "class_weights = torch.tensor(inv, dtype=torch.float32, device=device)\n",
        "criterion = nn.CrossEntropyLoss(label_smoothing=0.1, weight=class_weights)\n",
        "\n",
        "def make_optimizer(lr, wd=1e-2):\n",
        "    params = [p for p in model.parameters() if p.requires_grad]\n",
        "    return torch.optim.AdamW(params, lr=lr, weight_decay=wd)\n",
        "\n",
        "def run_epoch(loader, train=True, epoch=1, epochs=1, phase=\"Train\", optimizer=None):\n",
        "    model.train() if train else model.eval()\n",
        "    total, correct, loss_sum = 0, 0, 0.0\n",
        "    pbar = tqdm(loader, desc=f\"{phase} • Epoch {epoch}/{epochs}\", unit=\"batch\", leave=False)\n",
        "    for x, y in pbar:\n",
        "        x = x.to(device, non_blocking=True)\n",
        "        y = y.to(device, non_blocking=True)\n",
        "\n",
        "        if train:\n",
        "            optimizer.zero_grad(set_to_none=True)\n",
        "\n",
        "        with torch.cuda.amp.autocast(enabled=(device.type==\"cuda\")):\n",
        "            out = model(x)\n",
        "            loss = criterion(out, y)\n",
        "\n",
        "        if train:\n",
        "            scaler.scale(loss).backward()\n",
        "            scaler.step(optimizer)\n",
        "            scaler.update()\n",
        "\n",
        "        bs = x.size(0)\n",
        "        loss_sum += loss.item() * bs\n",
        "        preds = out.argmax(1)\n",
        "        correct += (preds == y).sum().item()\n",
        "        total += bs\n",
        "        pbar.set_postfix(loss=f\"{loss_sum/total:.4f}\", acc=f\"{correct/total:.3f}\")\n",
        "    return loss_sum/total, correct/total\n",
        "\n",
        "# ---------------- Stage 1: head-only ----------------\n",
        "set_trainable(model, False)\n",
        "head = get_head(model)\n",
        "assert head is not None, \"Couldn't find model head\"\n",
        "set_trainable(head, True)\n",
        "\n",
        "E1 = 3\n",
        "opt = make_optimizer(lr=5e-4)\n",
        "print(\"\\n[Stage 1] Head-only training\")\n",
        "for ep in range(1, E1+1):\n",
        "    tr_loss, tr_acc = run_epoch(train_loader, True, ep, E1, \"Train(H)\", optimizer=opt)\n",
        "    va_loss, va_acc = run_epoch(val_loader,   False, ep, E1, \"Val(H)\")\n",
        "    print(f\"Stage1 Ep {ep}/{E1} | train_acc={tr_acc:.3f} | val_acc={va_acc:.3f}\")\n",
        "\n",
        "# ---------------- Stage 2: unfreeze last 4 blocks + norms/pos_embed ----------------\n",
        "for blk in model.blocks[-4:]:\n",
        "    set_trainable(blk, True)\n",
        "if hasattr(model, \"norm\"): set_trainable(model.norm, True)\n",
        "if hasattr(model, \"pos_embed\"): model.pos_embed.requires_grad = True\n",
        "\n",
        "E2 = 5\n",
        "opt = make_optimizer(lr=3e-4)\n",
        "print(\"\\n[Stage 2] Unfreeze last 4 blocks + norms/pos\")\n",
        "for ep in range(1, E2+1):\n",
        "    tr_loss, tr_acc = run_epoch(train_loader, True, ep, E2, \"Train(L4)\", optimizer=opt)\n",
        "    va_loss, va_acc = run_epoch(val_loader,   False, ep, E2, \"Val(L4)\")\n",
        "    print(f\"Stage2 Ep {ep}/{E2} | train_acc={tr_acc:.3f} | val_acc={va_acc:.3f}\")\n",
        "\n",
        "# ---------------- Stage 3: unfreeze all ----------------\n",
        "set_trainable(model, True)\n",
        "\n",
        "E3 = 7\n",
        "opt = make_optimizer(lr=1e-4)\n",
        "print(\"\\n[Stage 3] Unfreeze ALL\")\n",
        "best_state, best_val = None, 0.0\n",
        "for ep in range(1, E3+1):\n",
        "    tr_loss, tr_acc = run_epoch(train_loader, True, ep, E3, \"Train(ALL)\", optimizer=opt)\n",
        "    va_loss, va_acc = run_epoch(val_loader,   False, ep, E3, \"Val(ALL)\")\n",
        "    if va_acc > best_val:\n",
        "        best_val = va_acc\n",
        "        best_state = {k: v.detach().cpu().clone() for k, v in model.state_dict().items()}\n",
        "    print(f\"Stage3 Ep {ep}/{E3} | train_acc={tr_acc:.3f} | val_acc={va_acc:.3f} | best_val={best_val:.3f}\")\n",
        "\n",
        "if best_state:\n",
        "    model.load_state_dict({k: v.to(device) for k, v in best_state.items()})\n",
        "\n",
        "# ============================================================\n",
        "# Final Test Accuracy & Metrics\n",
        "# ============================================================\n",
        "def collect_logits_and_labels(loader):\n",
        "    model.eval()\n",
        "    logits_list, labels_list = [], []\n",
        "    with torch.no_grad():\n",
        "        for x, y in loader:\n",
        "            x = x.to(device, non_blocking=True)\n",
        "            y = y.to(device, non_blocking=True)\n",
        "            logits_list.append(model(x))\n",
        "            labels_list.append(y)\n",
        "    return torch.cat(logits_list, 0).cpu(), torch.cat(labels_list, 0).cpu()\n",
        "\n",
        "logits, y_true = collect_logits_and_labels(test_loader)\n",
        "y_pred = logits.argmax(1)\n",
        "\n",
        "acc_percent = round(((y_pred == y_true).float().mean().item()) * 100, 2)\n",
        "print(f\"\\n Final Test Accuracy — Vision Transformer (ViT): {acc_percent:.2f}% \")\n",
        "\n",
        "\n",
        "rep = classification_report(\n",
        "    y_true.numpy(), y_pred.numpy(),\n",
        "    target_names=class_names, output_dict=True, digits=2\n",
        ")\n",
        "df = pd.DataFrame(rep).T\n",
        "for col in [\"precision\", \"recall\", \"f1-score\"]:\n",
        "    df[col] = (df[col].astype(float) * 100).round(2)\n",
        "df.rename(columns={\"f1-score\":\"f1_score\"}, inplace=True)\n",
        "\n",
        "cm = confusion_matrix(y_true.numpy(), y_pred.numpy(), labels=list(range(num_classes)))\n",
        "per_class_acc = (cm.diagonal() / np.clip(cm.sum(axis=1), 1, None)) * 100.0\n",
        "for i, cname in enumerate(class_names):\n",
        "    df.loc[cname, \"accuracy\"] = round(per_class_acc[i], 2)\n",
        "\n",
        "if \"accuracy\" in df.index:\n",
        "    df.loc[\"accuracy\", [\"precision\",\"recall\",\"f1_score\",\"accuracy\"]] = [acc_percent]*4\n",
        "    df.loc[\"accuracy\", \"support\"] = int(y_true.numel())\n",
        "for avg_row in [\"macro avg\", \"weighted avg\"]:\n",
        "    if avg_row in df.index:\n",
        "        df.loc[avg_row, \"accuracy\"] = acc_percent\n",
        "if \"support\" in df.columns:\n",
        "    df[\"support\"] = df[\"support\"].astype(float).round(0).astype(int)\n",
        "\n",
        "cols = [\"precision\", \"recall\", \"f1_score\", \"accuracy\", \"support\"]\n",
        "order = class_names + [r for r in [\"accuracy\",\"macro avg\",\"weighted avg\"] if r in df.index]\n",
        "print(\"\\nClassification Report with Per-Class Accuracy (%):\")\n",
        "print(df.loc[order, cols].to_string())\n",
        "\n",
        "fig, ax = plt.subplots(figsize=(8,6))\n",
        "disp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=class_names)\n",
        "disp.plot(ax=ax, cmap=\"Blues\", xticks_rotation=45, colorbar=False)\n",
        "ax.set_title(\"Confusion Matrix - Vision Transformer (vit)\")\n",
        "plt.tight_layout()\n",
        "plt.show()\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "SGNG3CWr1fqW",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "82afbdac-1263-4089-b8a2-37e0106df64b"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Collecting onnx\n",
            "  Downloading onnx-1.19.1-cp312-cp312-manylinux2014_x86_64.manylinux_2_17_x86_64.whl.metadata (7.0 kB)\n",
            "Collecting onnxruntime\n",
            "  Downloading onnxruntime-1.23.2-cp312-cp312-manylinux_2_27_x86_64.manylinux_2_28_x86_64.whl.metadata (5.1 kB)\n",
            "Requirement already satisfied: numpy>=1.22 in /usr/local/lib/python3.12/dist-packages (from onnx) (2.0.2)\n",
            "Requirement already satisfied: protobuf>=4.25.1 in /usr/local/lib/python3.12/dist-packages (from onnx) (5.29.5)\n",
            "Requirement already satisfied: typing_extensions>=4.7.1 in /usr/local/lib/python3.12/dist-packages (from onnx) (4.15.0)\n",
            "Requirement already satisfied: ml_dtypes>=0.5.0 in /usr/local/lib/python3.12/dist-packages (from onnx) (0.5.3)\n",
            "Collecting coloredlogs (from onnxruntime)\n",
            "  Downloading coloredlogs-15.0.1-py2.py3-none-any.whl.metadata (12 kB)\n",
            "Requirement already satisfied: flatbuffers in /usr/local/lib/python3.12/dist-packages (from onnxruntime) (25.9.23)\n",
            "Requirement already satisfied: packaging in /usr/local/lib/python3.12/dist-packages (from onnxruntime) (25.0)\n",
            "Requirement already satisfied: sympy in /usr/local/lib/python3.12/dist-packages (from onnxruntime) (1.13.3)\n",
            "Collecting humanfriendly>=9.1 (from coloredlogs->onnxruntime)\n",
            "  Downloading humanfriendly-10.0-py2.py3-none-any.whl.metadata (9.2 kB)\n",
            "Requirement already satisfied: mpmath<1.4,>=1.1.0 in /usr/local/lib/python3.12/dist-packages (from sympy->onnxruntime) (1.3.0)\n",
            "Downloading onnx-1.19.1-cp312-cp312-manylinux2014_x86_64.manylinux_2_17_x86_64.whl (18.2 MB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m18.2/18.2 MB\u001b[0m \u001b[31m112.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hDownloading onnxruntime-1.23.2-cp312-cp312-manylinux_2_27_x86_64.manylinux_2_28_x86_64.whl (17.4 MB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m17.4/17.4 MB\u001b[0m \u001b[31m71.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hDownloading coloredlogs-15.0.1-py2.py3-none-any.whl (46 kB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m46.0/46.0 kB\u001b[0m \u001b[31m4.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hDownloading humanfriendly-10.0-py2.py3-none-any.whl (86 kB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m86.8/86.8 kB\u001b[0m \u001b[31m9.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hInstalling collected packages: humanfriendly, onnx, coloredlogs, onnxruntime\n",
            "Successfully installed coloredlogs-15.0.1 humanfriendly-10.0 onnx-1.19.1 onnxruntime-1.23.2\n",
            "Saved export bundle to: /content/drive/MyDrive/model_exports/vit_tiny_patch16_224_224px_20251023_030400\n",
            "Image: /content/data/test_extract/test data/Bcc/bcc_224_00427.jpg\n",
            "Pred: Bcc 87.61%\n"
          ]
        }
      ],
      "source": [
        "\n",
        "# === For (Google Colab Only) Export Model===\n",
        "!pip install onnx onnxruntime\n",
        "import json, time, torch, onnx\n",
        "from pathlib import Path\n",
        "import timm\n",
        "\n",
        "# Make sure best weights are loaded and the model is in eval() on CPU\n",
        "if 'best_state' in globals() and best_state is not None:\n",
        "    model.load_state_dict(best_state)\n",
        "model.eval()\n",
        "model.cpu()\n",
        "\n",
        "export_root = Path(\"/content/drive/MyDrive/model_exports\")\n",
        "#export_root = Path(r\"C:\\Users\\Administrator\\Desktop\\Dataset2\\model_exports\")\n",
        "\n",
        "export_root.mkdir(parents=True, exist_ok=True)\n",
        "stamp = time.strftime(\"%Y%m%d_%H%M%S\")\n",
        "exp_dir = export_root / f\"{MODEL_NAME}_{IMG_SIZE}px_{stamp}\"\n",
        "exp_dir.mkdir(parents=True, exist_ok=True)\n",
        "\n",
        "# Save metadata needed for inference\n",
        "meta = {\n",
        "    \"model_name\": MODEL_NAME,\n",
        "    \"img_size\": IMG_SIZE,\n",
        "    \"num_classes\": num_classes,\n",
        "    \"class_names\": class_names,\n",
        "    \"normalize_mean\": [0.485, 0.456, 0.406],\n",
        "    \"normalize_std\":  [0.229, 0.224, 0.225],\n",
        "    \"pytorch_version\": torch.__version__,\n",
        "    \"timm_version\": getattr(timm, \"__version__\", \"unknown\"),\n",
        "}\n",
        "with open(exp_dir / \"metadata.json\", \"w\") as f:\n",
        "    json.dump(meta, f, indent=2)\n",
        "with open(exp_dir / \"labels.txt\", \"w\") as f:\n",
        "    f.write(\"\\n\".join(class_names))\n",
        "\n",
        "# 1) Plain PyTorch weights\n",
        "torch.save(model.state_dict(), exp_dir / \"weights_state_dict.pth\")\n",
        "\n",
        "# 2) TorchScript\n",
        "example = torch.randn(1, 3, IMG_SIZE, IMG_SIZE)\n",
        "ts = torch.jit.trace(model, example)\n",
        "ts.save(str(exp_dir / \"model_torchscript.pt\"))\n",
        "\n",
        "# 3) ONNX\n",
        "onnx_path = exp_dir / \"model.onnx\"\n",
        "torch.onnx.export(\n",
        "    model,\n",
        "    example,\n",
        "    onnx_path,\n",
        "    input_names=[\"input\"],\n",
        "    output_names=[\"logits\"],\n",
        "    dynamic_axes={\"input\": {0: \"batch\"}, \"logits\": {0: \"batch\"}},\n",
        "    opset_version=17,\n",
        ")\n",
        "onnx_model = onnx.load(str(onnx_path))\n",
        "onnx.checker.check_model(onnx_model)\n",
        "\n",
        "print(\"Saved export bundle to:\", exp_dir)\n",
        "\n",
        "# === TEST INFERENCE CELL (uses saved state_dict) ===\n",
        "import json, torch\n",
        "from PIL import Image\n",
        "from torchvision import transforms\n",
        "import glob, os\n",
        "\n",
        "bundle_dir = exp_dir  # from the export cell above\n",
        "ckpt = str(bundle_dir / \"weights_state_dict.pth\")\n",
        "with open(bundle_dir / \"metadata.json\") as f:\n",
        "    meta = json.load(f)\n",
        "\n",
        "# Recreate model + weights\n",
        "import timm\n",
        "model_inf = timm.create_model(meta[\"model_name\"], pretrained=False, num_classes=meta[\"num_classes\"])\n",
        "model_inf.load_state_dict(torch.load(ckpt, map_location=\"cpu\"))\n",
        "model_inf.eval()\n",
        "\n",
        "eval_tfms = transforms.Compose([\n",
        "    transforms.Resize(256),\n",
        "    transforms.CenterCrop(meta[\"img_size\"]),\n",
        "    transforms.ToTensor(),\n",
        "    transforms.Normalize(meta[\"normalize_mean\"], meta[\"normalize_std\"]),\n",
        "])\n",
        "\n",
        "# Pick any image from your test set\n",
        "candidates = []\n",
        "for ext in (\"*.jpg\",\"*.jpeg\",\"*.png\",\"*.bmp\"):\n",
        "    candidates += glob.glob(os.path.join(test_path, \"**\", ext), recursive=True)\n",
        "assert len(candidates) > 0, \"No images found under test_path\"\n",
        "img_path = candidates[0]\n",
        "\n",
        "img = Image.open(img_path).convert(\"RGB\")\n",
        "x = eval_tfms(img).unsqueeze(0)\n",
        "with torch.no_grad():\n",
        "    logits = model_inf(x)\n",
        "    probs = torch.softmax(logits, dim=1)[0]\n",
        "top_prob, top_idx = probs.max(dim=0)\n",
        "print(\"Image:\", img_path)\n",
        "print(\"Pred:\", meta[\"class_names\"][int(top_idx)], f\"{float(top_prob)*100:.2f}%\")\n"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**The End.**"
      ],
      "metadata": {
        "id": "HfReSp7Cl5zI"
      }
    }
  ],
  "metadata": {
    "accelerator": "GPU",
    "colab": {
      "gpuType": "T4",
      "provenance": []
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "name": "python"
    },
    "widgets": {
      "application/vnd.jupyter.widget-state+json": {
        "7764c1f0f61f43218d2cb52f4755bc88": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_a2916e34edb847829102ed768109c836",
              "IPY_MODEL_3b0304c320ef40f98be2267827ba38f0",
              "IPY_MODEL_9a4a81b74b324780ba4100093df14c7b"
            ],
            "layout": "IPY_MODEL_19f874a9abd94134989722c39c626d6b"
          }
        },
        "a2916e34edb847829102ed768109c836": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_1e2ab6163cfe4e39a6ab75a4022e43f7",
            "placeholder": "​",
            "style": "IPY_MODEL_8e2fd21e3de14ae0a052d85c7da51a13",
            "value": "model.safetensors: 100%"
          }
        },
        "3b0304c320ef40f98be2267827ba38f0": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_b64203a357994a308a3627a08c34e886",
            "max": 22883348,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_d3d3d73f218a4cf99bb0b4210071a019",
            "value": 22883348
          }
        },
        "9a4a81b74b324780ba4100093df14c7b": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_7fb43fd7debe4be483a7ba26e33f61bd",
            "placeholder": "​",
            "style": "IPY_MODEL_4c67e6ff6aa64f7e8765bb1809ecd786",
            "value": " 22.9M/22.9M [00:00&lt;00:00, 31.9MB/s]"
          }
        },
        "19f874a9abd94134989722c39c626d6b": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "1e2ab6163cfe4e39a6ab75a4022e43f7": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "8e2fd21e3de14ae0a052d85c7da51a13": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "b64203a357994a308a3627a08c34e886": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "d3d3d73f218a4cf99bb0b4210071a019": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "7fb43fd7debe4be483a7ba26e33f61bd": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "4c67e6ff6aa64f7e8765bb1809ecd786": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        }
      }
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}